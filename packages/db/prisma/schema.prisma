generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  USER
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  image     String
  role      Role      @default(USER)
  password  String?
  addresses Address[]
  accounts  Account[]
  sessions  Session[]

  verifiers Verifier[]
  products  Product[]
  carts     Cart[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  provider            String
  providerAccountId   String
  providerAccountName String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Verifier {
  token     String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
}

model Address {
  id     String @id @default(cuid())
  name   String
  phone  String
  state  String
  street String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  orders Cart[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  image    String
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  price       Float
  discount    Float    @default(0.00)
  stock       Int      @default(0)
  reviews     Review[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  carts CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String  @id @default(cuid())
  rating  Int
  comment String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

enum Status {
  NEW
  PENDING
  CONFIRMED
  PROCESSING
  DELIVERED
  CANCELLED
}

enum Payment {
  UNPAID
  PAID
  REFUNDED
}

model Cart {
  id      Int        @id @default(autoincrement())
  items   CartItem[]
  total   Float      @default(0.00)
  status  Status     @default(NEW)
  payment Payment    @default(UNPAID)

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int

  @@id([cartId, productId])
}
