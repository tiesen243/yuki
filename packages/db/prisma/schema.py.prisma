generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  image     String
  role      Role      @default(USER)
  password  String?
  addresses Address[]
  accounts  Account[]
  sessions  Session[]

  products Product[]
  carts    Cart[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  provider   String
  providerId String
  name       String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([provider, providerId])
}

model Address {
  id     String @id @default(cuid())
  name   String
  phone  String
  state  String
  street String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  orders Cart[]
}

model Session {
  sessionToken String   @unique
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  createdAt DateTime @default(now())
}

model Category {
  id       String    @id @default(cuid())
  name     String
  image    String
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int      @default(0)
  reviews     Review[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  carts CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String  @id @default(cuid())
  rating  Int
  comment String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

enum Status {
  NEW
  PENDING
  DELIVERED
  CANCELED
}

model Cart {
  id     String     @id @default(cuid())
  items  CartItem[]
  status Status     @default(NEW)

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  @@id([cartId, productId])
}
